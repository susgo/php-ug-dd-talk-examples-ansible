- hosts: all
  become: yes

  # here you can specify variables used in the playbook: use it with double curly brackets (e.g. {{ domain }}) for the use in tasks.
  vars:
    domain: "yii2-basic"
    db_name: "yii2basic"
    db_user: "yii2basic"
    db_pass: "1234"
  # pre tasks run at the beginning, before all the other tasks but in the order they are listed here.  
  pre_tasks:
  - name: Update apt-cache
    apt: update_cache=yes cache_valid_time=3600
  # Tasks are all the things you want to do. They are executed in the order they have been written here,  
  tasks:
  - name: "Install Webserver, e.g. Apache"
    apt: name=apache2 state=present

  - name: "Install PHP 7.1: prepare installation"
    apt: name=software-properties-common state=present

  - name: apt add-apt-repository
    apt_repository:
      repo: 'ppa:ondrej/php'
      state: present 

  # with_items declares a loop
  - name: "Install phplibs"
    apt: name={{ item }} state=present
    with_items: 
      - php7.1
      - libapache2-mod-php7.1
      - php7.1-cli 
      - php7.1-common
      - php7.1-mbstring 
      - php7.1-gd 
      - php7.1-intl 
      - php7.1-xml 
      - php7.1-mysql 
      - php7.1-mcrypt 
      - php7.1-zip
      - php7.1-ldap
      - php7.1-apcu
      - php7.1-curl

  # In a real world problem, this task should be handled by `handlers` and with keyword `notify` in the task.
  - name: Start Apache
    service: name=apache2 state=started enabled=yes

  # You can search and write into files: (Also see the notify statement here)
  - name: Ensure phpMyAdmin config file is included in Apache config.
    lineinfile:
      dest: /etc/apache2/apache2.conf
      state: present
      regexp: "^Include.+phpmyadmin.+$"
      line: "Include /etc/phpmyadmin/apache.conf"
      insertafter: "EOF"
    notify: restart apache

  # Some more examples are commented here
  #- name: Disable TRACE method
  #  lineinfile:
  #    path: /etc/apache2/apache2.conf
  #    regexp: "TraceEnable "
  #    line: "TraceEnable off"
  #  notify: restart apache

  #- name: Disable directory listings
  #  lineinfile:
  #    path: /etc/apache2/apache2.conf
  #    regexp: "Options Includes"
  #    line: "Options Includes FollowSymLinks MultiViews"
  #  notify: restart apache

  - name: Delete index.html script
    file: path="/var/www/html/index.html" state=absent   

  - name: Install MySQL-server things.
    apt: pkg=mysql-server state=present

  - name: Install python MySQL package #required for mysql_db tasks
    apt: name=python-mysqldb state=present   

  - name: Install phpMyAdmin
    apt: name=phpmyadmin state=present

  - name: Start MySQL Service
    service: name=mysql state=started enabled=true

  # Some examples for handling database creation, deletion, ... are commented here
  #- name: Delete test database
  #  mysql_db: db=test state=absent  
  #  become: true

  # Prepare databases:
  # Configure MySQL:
  #- name: Create the database for software
  #  mysql_db:
  #    db: '{{ db_name | regex_replace("\.", "") }}'
  #    state: present 

  #- name: Create a MySQL user for this instance
  #  mysql_user:
  #    name: "db_user"
  #    password: "{{ db_pass }}"
  #    priv: '{{ db_name | regex_replace("\.", "") }}.*:ALL'
  #    state: present
  #    update_password: on_create

  # Load project files: Clone or pull them
  #- name: Check out app master branch
  #  git:
  #    repo: https://github.com/yiisoft/yii2-app-basic
  #    dest: /var/www/html/{{ domain }}/app/
  #  when: not software_dir.stat.exists

  - name: Check if Composer is installed.
    stat: "path=/usr/local/bin/composer"
    register: composer_bin

  - name: Download Composer installer.
    get_url:
      url: https://getcomposer.org/installer
      dest: /tmp/composer-installer.php
      mode: 0755
    when: not composer_bin.stat.exists

  - name: Run Composer installer.
    command: >
      php composer-installer.php
      chdir=/tmp
    when: not composer_bin.stat.exists

  - name: Move Composer into globally-accessible location.
    shell: >
      mv /tmp/composer.phar /usr/local/bin/composer
      creates=/usr/local/bin/composer
    when: not composer_bin.stat.exists

  - name: Update Composer to latest version (if configured).
    shell: >
      php /usr/local/bin/composer self-update
    register: composer_update
    changed_when: "'Updating to version' in composer_update.stdout"

  # Clone project and install with all dependencies
  - name: check if software directory exists
    stat: path=/var/www/html/{{ domain }}
    register: software_dir

  - name: make project folder
    file: path=/var/www/html/{{ domain }} state=directory mode=0777
    when: not software_dir.stat.exists
  
  # conditionally run tasks.
  - name: Clone project and install with all dependencies 
    composer:
      command: create-project
      arguments: yiisoft/yii2-app-basic /var/www/html/{{ domain }}
      working_dir: /var/www/html/{{ domain }}
      no_dev: false
      prefer_dist: yes
    when: not software_dir.stat.exists  

  - name: Composer install dependencies
    composer:
      command: update
      no_dev: false
      working_dir: /var/www/html/{{ domain }} 
    when: software_dir.stat.exists    

  # file permissions
  - name: Set instance dir permissions
    file: dest=/var/www/html/{{ domain }}/app state=directory mode=0777 recurse=yes    

  # use templates
  - name: Add Apache virtualhost for instance
    template:
      src: "templates/apache.conf.j2"
      dest: "/etc/apache2/sites-available/{{ domain }}.conf"
      mode: 0644
    notify: restart apache

  - name: Symlink instance virtualhost to sites-enabled
    file: src="/etc/apache2/sites-available/{{ domain }}.conf" dest="/etc/apache2/sites-enabled/{{ domain }}.conf" state=link
    notify: restart apache

  #- name: append new domain to hosts file
  #  lineinfile:
  #    path: /etc/hosts
  #    regexp: " {{ domain }}$"
  #    line: "127.0.0.1 {{ domain }}"       

  # handlers are triggered by the notify statement of tasks. They run at the end. 
  handlers:
    - name: restart apache
      service: name=apache2 state=restarted
    - name: restart MySQL
      service: name=mysql state=restarted

